@{
    ViewBag.Title = "ProductCategories";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Shop.Models.ProductCategory
<style>
    .swiper-button-next, .swiper-button-prev {
        color: #999; /* Màu sắc xám nhạt cho các nút */
        font-size: 18px; /* Giảm kích thước font của nút */
        width: 30px; /* Điều chỉnh chiều rộng của nút */
        height: 30px; /* Điều chỉnh chiều cao của nút */
    }

        .swiper-button-next::after, .swiper-button-prev::after {
            font-size: 18px; /* Kích thước của mũi tên */
        }

    .swiper-pagination-bullet {
        background-color: white !important;
    }

    .product-slide-2 {
        background-image: url('https://hocviengaming.vn/wp-content/uploads/2025/02/tay-cam-easysmx-d05-banner1.jpg');
        background-size: cover;
        background-position: center;
        min-height: 300px;
    }
</style>
<link rel="stylesheet" href="~/assets/CSS/Product/Product_categories.css" />
<div class="container p-3 bg-white my-3 rounded-3">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb small text-muted m-0">
            <li class="breadcrumb-item"><a href="/">Trang Chủ</a></li>
            <li class="breadcrumb-item">Danh Mục Sản Phẩm</a></li>
            <li class="breadcrumb-item"><a href="/Product/ProductDienThoaiTabLet?maDm=DM001">Tivi & Màn Hình</a></li>
        </ol>
    </nav>
</div>


<div class="container bg-white p-4 rounded-3 mb-4">
    <h4 class="fw-bold text-uppercase border-start border-4 border-success ps-3 mb-4">
        TOP Tivi & Màn Hình
    </h4>
    <div class="row g-4">
        <!-- Current Slide -->
        <div class="col-md-8">
            <div class="swiper product-swiper rounded overflow-hidden">
                <div class="swiper-wrapper">
                    <!-- Slide 1: iPhone 14 Pro -->
                    <div class="swiper-slide position-relative text-white ">
                        <img src="https://taycamchoigame.com/wp-content/uploads/2018/09/tay-cam-banner.jpg"
                             alt="Smart Tivi Xiaomi Redmi"
                             class="w-100 h-100 position-absolute top-0 start-0 object-fit-cover z-0" />
                        <div class="position-absolute top-0 start-0 w-100 h-100" style="background-color: rgba(0,0,0,0.4); z-index: 0;"></div>
                        <div class="position-relative z-1 p-5">
                            <h3 class="fw-bold">Play Station Sony <br />PS5</h3>
                            <p>30th Anniversary  <br /> Limited Edition <br />-------</p>
                            <a href="/Product/ProductDetail/HH001?mabienthe=BT001" class="btn btn-light text-dark rounded-pill px-4">MUA NGAY</a>
                        </div>
                    </div>

                    <!-- Slide 2: Xiaomi 13 Pro -->
                    <div class="swiper-slide position-relative text-white">
                        <img src="https://bizweb.dktcdn.net/100/365/392/files/flydigi-banner.png?v=1684926281591"
                             alt="Tay Cầm Chơi Game Flydigi Vader 4 Pro"
                             class="w-100 h-100 position-absolute top-0 start-0 object-fit-cover z-0" />
                        <div class="position-absolute top-0 start-0 w-100 h-100" style="background-color: rgba(0,0,0,0.4); z-index: 0;"></div>
                        <div class="position-relative z-1 p-5">
                            <h3 class="fw-bold">Tay Cầm Chơi Game <br>Flydigi Vader 4 Pro</h3>
                            <p>Joystick Điều Chỉnh Lực <br />Polling Rate 1000Hz.<br />-------</p>
                            <a href="/Product/ProductDetail/HH001?mabienthe=BT001" class="btn btn-light text-dark rounded-pill px-4">MUA NGAY</a>
                        </div>
                    </div>

                    <!-- Slide 3: OPPO Reno Series -->
                    <div class="swiper-slide position-relative text-white">
                        <img src="https://news.tandoanh.vn/wp-content/uploads/2024/07/REVIEW-MAN-HINH-MSI-MAG-275QF-H12.jpg"
                             alt="Màn hình Gaming MSI MAG 275QF 27 inch"
                             class="w-100 h-100 position-absolute top-0 start-0 object-fit-cover z-0" />
                        <div class="position-absolute top-0 start-0 w-100 h-100" style="background-color: rgba(0,0,0,0.4); z-index: 0;"></div>
                        <div class="position-relative z-1 p-5">
                            <h3 class="fw-bold">Màn hình Gaming MSI <br />MAG 275QF 27 inch</h3>
                            <p>Ngoại hình hầm hố chuẩn gaming<br />Tông màu đen chủ đạo<br />-------</p>
                            <a href="/Product/ProductDetail/HH001?mabienthe=BT001" class="btn btn-light text-dark rounded-pill px-4">MUA NGAY</a>
                        </div>
                    </div>




                </div>

                <!-- Pagination -->
                <div class="swiper-pagination position-absolute bottom-0 start-50 translate-middle-x mb-3"></div>

                <!-- Navigation -->
                <div class="swiper-button-prev text-white"></div>
                <div class="swiper-button-next text-white"></div>
            </div>
        </div>

        <!-- Next Slide Preview -->
        <div class="col-md-4">
            <div class="product-slide-2 position-relative text-dark rounded overflow-hidden" style="height: 300px;">
                <!-- Nội dung sản phẩm ở đây -->
                <a href="/Product/ProductDetail/HH001?mabienthe=BT001"
                   class="btn btn-light position-absolute start-50 translate-middle-x" style="bottom: 10px;">
                    Mua ngay
                </a>
            </div>
        </div>

    </div>
</div>
<div class="container bg-white rounded-3 my-2 p-3">
    <h4 class="fw-bold text-uppercase border-start border-4 border-success ps-3 my-4">
        Danh Mục Sản phẩm Khác
    </h4>
    <!-- Categories Grid -->
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-5 g-3">
        <!-- Category Item Template -->
        <div class="col">
            <a href="http://localhost:65154/Product/ProductDienThoaiTabLet?maDm=DM001" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            var maDanhMucCanDem = "DM001";
                            var soLuongSanPham = Model.BienTheHangHoas
                                .Count(bt => Model.HangHoas.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Điện Thoại</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="~/assets/Image/Header/Product_Feature/phone_iphone.png" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="http://localhost:65154/Product/ProductDienThoaiTabLet?maDm=DM003" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM003";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Tablet</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://cdn.tgdd.vn/Products/Images/522/325517/ipad-pro-13-inch-m4-wifi-black-thumb-600x600.jpg" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="http://localhost:65154/Product/ProductLaptopPC?maDm=DM002" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM002";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">LapTop</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="~/assets/Image/Header/Product_Feature/Lap_mac.png" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="http://localhost:65154/Product/AnotherProduct?maDm=DM004" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM004";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Bàn Phím</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://cdnv2.tgdd.vn/mwg-static/tgdd/Products/Images/4547/337862/ban-phim-co-bluetooth-akko-5098b-black-gold-v3-piano-pro-090525-103858-370-600x600.jpg" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col">
            <a href="http://localhost:65154/Product/AnotherProduct?maDm=DM006" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM006";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Loa - Tai Nghe</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://cdn2.cellphones.com.vn/insecure/rs:fill:0:358/q:90/plain/https://cellphones.com.vn/media/catalog/product/j/b/jbl_flip_6_4.png" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>

        <div class="col d-none" data-extra="true">
            <a href="http://localhost:65154/Product/AnotherProduct?maDm=DM007" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM007";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Máy Ảnh</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://imagedelivery.net/ZeGtsGSjuQe1P3UP_zk3fQ/09bd243f-a2ca-4e60-fc6e-6bc0dc13b400/storedata" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col d-none" data-extra="true">
            <a href="http://localhost:65154/Product/AnotherProduct?maDm=DM008" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM008";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Tivi</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://cdn.tgdd.vn/Products/Images/1942/324928/tivi-qned-lg-4k-65-inch-65qned80tsa-240424-092712-550x340.jpg" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col d-none" data-extra="true">
            <a href="http://localhost:65154/Product/Gaming?maDm=DM009" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM009";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Gaming</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://store.sony.com.vn/cdn/shop/products/DSE_08_PR_CMYK_WithNotice_1_2000x.jpg?v=1675771709" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col d-none" data-extra="true">
            <a href="http://localhost:65154/Product/AnotherProduct?maDm=DM010" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM010";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Thiết bị mạng</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://cdn.tgdd.vn/Products/Images/4727/235817/router-chuan-wifi-6-ax1500-tp-link-archer-ax10-100822-044850-600x600.jpg" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col d-none" data-extra="true">
            <a href="http://localhost:65154/Product/AnotherProduct?maDm=DM011" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM011";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Màn hình</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://anphat.com.vn/media/product/45507_ta.jpg" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>
        <div class="col d-none" data-extra="true">
            <a href="http://localhost:65154/Product/PhuKien?maDm=DM005" class="text-decoration-none text-dark">
                <div class="card category-card h-100 border">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        @{
                            maDanhMucCanDem = "DM005";
                            soLuongSanPham = Model.ListBienTheGoc
                                .Count(bt => Model.ListHangHoaGoc.Any(hh => hh.MaHangHoa == bt.MaHangHoa && hh.MaDanhMuc == maDanhMucCanDem));
                        }
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div>
                                <h3 class="card-title fs-6 fw-semibold">Phụ kiện</h3>
                                <p class="card-text text-secondary small">@soLuongSanPham sản phẩm</p>
                            </div>
                        </div>
                        <img src="https://www.tnc.com.vn/uploads/product/vy2023/ext/sac-du-phong-baseus-qpow2-10000mah-black-125982.jpg" alt="iPhone" class="category-image-top-cell">
                    </div>
                </div>
            </a>
        </div>

    </div>
    <!-- Nút Xem tất cả -->
    <div class="text-center mt-3">
        <button class="btn btn-outline-success" id="toggleButton" onclick="toggleCategories()">Xem tất cả</button>
    </div>
</div>

<div class=" container p-0 rounded-3">
    <!-- Product Carousel -->
    <div style="background-color:white" id="productCarousel" class="carousel slide position-relative px-3 rounded-3">
        <!-- Navigation Tabs -->

        @{
            // Tính lại danh sách đánh giá trung bình cho mỗi hàng hóa
            var danhGiaTrungBinhDict = Model.ListDanhGia
                .GroupBy(dg => dg.MaHangHoa)
                .ToDictionary(
                    g => g.Key,
                    g => g.Average(dg => dg.SoSao)
                );

            // Gán lại giá trị DanhGiaTrungBinh cho mỗi hàng hóa
            foreach (var hh in Model.HangHoas)
            {
                if (danhGiaTrungBinhDict.ContainsKey(hh.MaHangHoa))
                {
                    hh.DanhGiaTrungBinh = danhGiaTrungBinhDict[hh.MaHangHoa];
                }
                else
                {
                    hh.DanhGiaTrungBinh = 0; // Không có đánh giá
                }
            }

            // Lấy top 10 sản phẩm theo điểm đánh giá trung bình
            var products = (from hh in Model.HangHoas
                            join bt in Model.BienTheHangHoas on hh.MaHangHoa equals bt.MaHangHoa
                            orderby hh.DanhGiaTrungBinh descending
                            select new { HangHoa = hh, BienThe = bt })
                .Take(10)
                .ToList();



            int itemsPerSlide = 5; // Mỗi slide hiển thị 5 sản phẩm
            int totalSlides = (int)Math.Ceiling((double)products.Count / itemsPerSlide);
        }
        <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <h4 class="fw-bold text-uppercase border-start border-4 border-success ps-3 my-4">
                    Được mọi người yêu thích
                </h4>
                @for (int i = 0; i < totalSlides; i++)
                {
                    var slideProducts = products.Skip(i * itemsPerSlide).Take(itemsPerSlide).ToList();
                    <div class="px-3 carousel-item @(i == 0 ? " active" : "" )">
                        <div class="row">
                            @foreach (var item in slideProducts)
                            {
                                <div class="col-custom-5 ">

                                    <div class="product-card position-relative">
                                        <span class="discount-badge position-absolute top-0 end-0">
                                            @((int)(100 - (item.BienThe.GiaKhuyenMai / item.BienThe.GiaBan * 100)))% OFF
                                        </span>
                                        <div class="product-image-container">
                                            <img src="~/assets/Image/Product/@item.BienThe.UrlAnh.FirstOrDefault()" alt="Product" width="100%" height="100%">
                                        </div>
                                        <h6 class="text-center">@item.HangHoa.TenHangHoa @item.BienThe.MauSac (@item.BienThe.DungLuong)</h6>
                                        <p class="text-center">@item.HangHoa.MoTa</p>

                                        @{
                                            double rating = item.HangHoa.DanhGiaTrungBinh ?? 0;
                                            int full = (int)Math.Floor(rating);
                                            bool half = rating - full >= 0.5;
                                            int empty = 5 - full - (half ? 1 : 0);
                                        }
                                        <div class="text-center d-flex justify-content-center gap-1">
                                            @for (int s = 0; s < full; s++)
                                            {
                                                <i class="bi bi-star-fill text-warning"></i>
                                            }
                                            @if (half)
                                            {
                                                <i class="bi bi-star-half text-warning"></i>
                                            }
                                            @for (int s = 0; s < empty; s++)
                                            {
                                                <i class="bi bi-star text-warning"></i>
                                            }
                                        </div>


                                        <div class="price-container">
                                            <span class="current-price">@item.BienThe.GiaKhuyenMai.ToString("N0")</span>
                                            <span class="original-price">@item.BienThe.GiaBan.ToString("N0")</span>
                                        </div>
                                        <div class="free-shipping text-center">FREE SHIPPING</div>
                                        <div class="d-flex justify-content-between">
                                            <div class="stock-status">
                                                @if (item.BienThe.SoLuongTonKho > 0)
                                                {
                                                    <i class="bi bi-check-circle-fill in-stock-icon"></i>
                                                    <span>In stock</span>

                                                }
                                                else
                                                {
                                                    <i class="bi bi-x-circle-fill out-of-stock-icon text-danger"></i>
                                                    <span>&nbsp;Out stock</span>
                                                }
                                            </div>
                                            <a href="#" class="text-decoration-none text-dark hover-shake add-to-favorite" data-mahanghoa="@item.HangHoa.MaHangHoa">
                                                @if (ViewBag.DanhSachYeuThich.Contains(item.HangHoa.MaHangHoa))
                                                {
                                                    <i class="fas fa-heart heart-icon glowing-heart" data-filled="true"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-heart heart-icon" data-filled="false"></i>
                                                }
                                                <span>Yêu thích</span>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            @{
                int totalDisplayedItems = 0;

                foreach (var hangHoa in Model.HangHoas)
                {
                    totalDisplayedItems += Model.BienTheHangHoas.Count(bt => bt.MaHangHoa == hangHoa.MaHangHoa);
                }
                totalSlides = (int)Math.Ceiling((double)totalDisplayedItems / itemsPerSlide);
            }

            @if (totalSlides > 1)
            {
                <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
            }
        </div>
    </div>
</div>


=




<div class="layout-wrapper container p-3 my-3 rounded-3">
    <!-- SIDEBAR -->
    <div>
        <div class="sidebar">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="fw-bold text-uppercase border-start border-4 border-success ps-3 my-2">Thể loại</h6>
                <button class="btn btn-sm p-0 text-muted" id="resetFilters">
                    <i class="fa-solid fa-code-compare"></i> Reset All
                </button>

            </div>
            <div class="w-100  rounded" style="max-width: 220px;">

                <!-- By Brands -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between " onclick="toggleBrandFilter()" style="cursor: pointer;">
                        <h6 class="mb-2 small fw-medium">Lọc Theo Thương Hiệu</h6>
                        <i id="brand-icon" class="fa-solid fa-chevron-down"></i>
                    </div>
                    <!-- Search input using Bootstrap -->
                    <div id="brand-content" class="brand-collapse collapsed">
                        <div class="search-box small">
                            <input type="text" placeholder="Tìm kiếm ...">
                            <button><i class="fa-solid fa-magnifying-glass"></i></button>
                        </div>

                        <div class="brand-filter my-2 px-2">
                            @foreach (var thuonghieu in Model.ThuongHieus.Where(th => Model.HangHoas.Any(h => h.MaThuongHieu == th.MaThuongHieu)))
                            {
                                var hangHoasThuongHieu = Model.HangHoas.Where(h => h.MaThuongHieu == thuonghieu.MaThuongHieu).ToList();

                                // Lấy danh sách mã hàng hóa của thương hiệu
                                var maHangHoas = hangHoasThuongHieu.Select(h => h.MaHangHoa).ToList();

                                // Đếm tổng số biến thể thuộc các hàng hóa này
                                var soBienThe = Model.BienTheHangHoas.Count(bt => maHangHoas.Contains(bt.MaHangHoa));

                                <div class="form-check small my-2">
                                    <input class="form-check-input brand-checkbox" type="checkbox" id="brand_@thuonghieu.MaThuongHieu" value="@thuonghieu.MaThuongHieu">
                                    <label class="form-check-label d-flex w-100" for="brand_@thuonghieu.MaThuongHieu">
                                        <img width="70px" height="20px" src="~/assets/Image/Logo/LogoBrand/@thuonghieu.Logo" alt="@thuonghieu.TenThuongHieu" />
                                        &nbsp;
                                        <span class="text-muted">(@soBienThe)</span>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>



                <!-- By Price -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between " onclick="togglePriceFilter()" style="cursor: pointer;">
                        <h6 class="small fw-medium">Lọc Theo Giá</h6>
                        <i id="price-icon" class="fa-solid fa-chevron-down"></i>
                    </div>
                    @*Range*@
                    <div id="price-content" class="price-collapse collapsed">
                        <div class="range-slider position-relative my-3">
                            <!-- Thanh nền -->
                            <div class="slider-track"></div>

                            <!-- Thanh kéo trái -->
                            <input type="range" min="0" max="100000000" value="0" id="rangeMin" class="range-input">
                            <!-- Thanh kéo phải -->
                            <input type="range" min="0" max="100000000" value="100000000" id="rangeMax" class="range-input">

                            <!-- Track màu xanh giữa -->
                            <div class="slider-fill" id="sliderFill"></div>
                        </div>

                        <div class="">
                            <div class="input-group input-group-sm me-2" style="width: 100%;">
                                <span class="input-group-text">VND</span>
                                <input type="text" class="form-control" id="priceMinInput" value="0">
                            </div>
                            <div class="my-3" style="width: 30px; height:2px; background: #1ABA1A; align-self: center;"></div>

                            <div class="input-group input-group-sm me-2" style="width: 100%">
                                <span class="input-group-text">VND</span>
                                <input type="text" class="form-control" id="priceMaxInput" value="100000000">
                            </div>
                        </div>
                        <button class="btn btn-sm btn-success text-white my-2 px-3 py-1" id="filterByPrice">Go</button>
                    </div>
                </div>

                <!-- By Rating -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between " onclick="toggleRatingFilter()" style="cursor: pointer;">
                        <h6 class="small fw-medium">Lọc Theo Đánh Giá</h6>
                        <i id="rating-icon" class="fa-solid fa-chevron-down"></i>
                    </div>
                    @{
                        // Làm tròn rating xuống số nguyên (1–5) và đếm số hàng hóa tương ứng
                        var ratingCounts = Model.HangHoas
                        .Where(h => h.DanhGiaTrungBinh != null)
                        .GroupBy(h => Math.Floor(h.DanhGiaTrungBinh.Value))
                        .ToDictionary(
                        g => (int)g.Key,
                        g => g.Sum(h => Model.BienTheHangHoas.Count(bt => bt.MaHangHoa == h.MaHangHoa))
                        );

                    }

                    <div id="rating-content" class="rating-collapse collapsed">
                        @for (int rating = 5; rating >= 1; rating--)
                        {
                            var count = ratingCounts.ContainsKey(rating) ? ratingCounts[rating] : 0;
                            <div class="form-check small mb-2">
                                <input class="form-check-input rating-checkbox" value="@rating" type="checkbox">

                                <label class="form-check-label d-flex justify-content-between w-100" for="rating@rating" value="@rating">
                                    <span>
                                        @for (int i = 0; i < rating; i++)
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>
                                        }
                                    </span>
                                    <span class="text-muted">(@count)</span>
                                </label>
                            </div>
                        }
                    </div>

                </div>
                <!-- Conditions -->
                @{
                    var manHinhCounts = Model.BienTheHangHoas
                        .Where(bt => Model.HangHoas.Any(h => h.MaHangHoa == bt.MaHangHoa) && !string.IsNullOrEmpty(bt.KichThuocManHinh))
                        .GroupBy(bt => bt.KichThuocManHinh.Trim())
                        .OrderByDescending(g => g.Count())
                        .ToDictionary(g => g.Key, g => g.Count());
                }
                <div class="mb-2">
                    <div class="d-flex justify-content-between " onclick="toggleMonitorFilter()" style="cursor: pointer;">
                        <h6 class="small fw-medium">Kích Thước Màn Hình</h6>
                        <i id="monitor-icon" class="fa-solid fa-chevron-down"></i>
                    </div>
                    <div id="monitor-content" class="monitor-collapse collapsed">
                        @foreach (var item in manHinhCounts)
                        {
                            var id = "monitor_" + item.Key.Replace(" ", "").Replace(".", "").Replace("\"", "").ToLower();
                            <div class="form-check small mb-2">
                                <input class="form-check-input monitor-checkbox" value="@item.Key" type="checkbox" id="@id" />
                                <label class="form-check-label d-flex justify-content-between w-100" for="@id">
                                    <span>@item.Key</span><span class="text-muted">(@item.Value)</span>
                                </label>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
        <div class="mt-3 position-relative text-white" style="background-color: #222; border-radius: 10px; overflow: hidden;">
            <img src="https://ui-themez.smartinnovates.net/items/swoo_html/inner_pages/assets/img/addimg.png"
                 alt="Product Image"
                 class="img-fluid w-100"
                 style="object-fit: cover; height: 200px;">

            <div class="position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-end p-3"
                 style="background: rgba(0, 0, 0, 0.4);">
                <h6 class="fs-5 mb-3">
                    <strong>Osmo</strong> Pocket 3 <br> 5K wireless
                </h6>

                <div class="price">
                    <p class="text-uppercase text-white small mb-1">Giá từ</p>
                    <h5 class="fs-4 fw-normal">	15,890,000 VNĐ</h5>
                </div>
            </div>
        </div>
        <div class="mt-3 position-relative text-white" style="background-color: #222; border-radius: 10px; overflow: hidden;">
            <img src="https://s3v2.interdata.vn:9000/s3-586-15343-storage/dienthoaigiakho/wp-content/uploads/2024/08/18103819/samsung-3-mat-doc-6.jpg"
                 alt="Product Image"
                 class="img-fluid w-100"
                 style="object-fit: cover; height: 200px;">

            <div class="position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-end p-3"
                 style="background: rgba(0, 0, 0, 0.4);">
                <h6 class="fs-5 mb-3">
                    <strong>SamSung</strong> S25 <br>
                </h6>

                <div class="price">
                    <p class="text-uppercase text-white small mb-1">Giá từ</p>
                    <h5 class="fs-4 fw-normal">	15,890,000 VNĐ</h5>
                </div>
            </div>
        </div>
        <div class="mt-3 position-relative text-white" style="background-color: #222; border-radius: 10px; overflow: hidden;">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcShAdD9ncIaaWKiMehWRgdwCIIQKZUP9xZArg&s"
                 alt="Product Image"
                 class="img-fluid w-100"
                 style="object-fit: cover; height: 200px;">

            <div class="position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-end p-3"
                 style="background: rgba(0, 0, 0, 0.4);">
                <h6 class="fs-5 mb-3">
                    <strong>Macbook Pro M4</strong> 2025 <br> 16GB/512GB
                </h6>

                <div class="price">
                    <p class="text-uppercase text-white small mb-1">Giá từ</p>
                    <h5 class="fs-4 fw-normal">	15,890,000 VNĐ</h5>
                </div>
            </div>
        </div>

    </div>
    <style>
        .sort-btn {
            border: 1px solid #dee2e6;
            background-color: #f8f9fa;
            color: #212529;
            border-radius: 999px;
            padding: 6px 14px;
            font-size: 14px;
            display: flex;
            align-items: center;
            transition: all 0.2s ease;
        }

            .sort-btn:hover {
                background-color: #e9ecef;
            }

            .sort-btn.active {
                border: 1px solid #dc3545;
                background-color: #fff0f2;
                color: #dc3545;
                font-weight: 500;
            }
    </style>

    <!-- MAIN CONTENT -->
    <div class="main-content">

        <div style="background-color:white" id="productCarousel" class="carousel slide position-relative px-2 rounded-3">
            <!-- Navigation Tabs -->

            <div class="mb-3">
                <label class="fw-bold text-uppercase border-start border-4 border-success ps-3 my-2">Sắp xếp theo</label>
                <div class="d-flex flex-wrap gap-2">
                    <button class="sort-btn active" data-sort="highToLow">
                        <i class="bi bi-sort-down-alt me-1"></i> Giá Cao - Thấp
                    </button>
                    <button class="sort-btn" data-sort="lowToHigh">
                        <i class="bi bi-sort-up-alt me-1"></i> Giá Thấp - Cao
                    </button>
                    <button class="sort-btn" data-sort="hotDeals">
                        <i class="bi bi-percent me-1"></i> Khuyến Mãi Hot
                    </button>
                    <button class="sort-btn" data-sort="mostViewed">
                        <i class="bi bi-eye me-1"></i> Phổ biến
                    </button>
                </div>
            </div>

            <style>
                .discount-badge {
                    background-color: #dc3545; /* đỏ rực */
                    color: white;
                    font-weight: bold;
                    font-size: 0.75rem;
                    padding: 4px 8px;
                    border-bottom-left-radius: 8px;
                    z-index: 10;
                }
            </style>
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <div id="product-list" class="row product-list">
                        @foreach (var hangHoa in Model.HangHoas)
                        {
                            foreach (var bienThe in Model.BienTheHangHoas.Where(bt => bt.MaHangHoa == hangHoa.MaHangHoa))
                            {
                                <div class="col-md-3 col-lg-3 col-xl-3 mb-4 product-item d-none"
                                     data-thuong-hieu="@hangHoa.MaThuongHieu"
                                     data-rating="@Math.Floor(hangHoa.DanhGiaTrungBinh ?? 0)"
                                     data-ram="@bienThe.RAM"
                                     data-memory="@bienThe.DungLuong"
                                     data-monitor="@bienThe.KichThuocManHinh"
                                     data-price="@bienThe.GiaKhuyenMai.ToString(" N0") đ"
                                     data-original-price="@bienThe.GiaBan.ToString(" N0") đ"
                                     data-bonho="@bienThe.LoaiBoNho">

                                    <div class="product-card position-relative">
                                        <span class="discount-badge position-absolute top-0 end-0">
                                            @((int)(100 - (bienThe.GiaKhuyenMai / bienThe.GiaBan * 100)))% OFF
                                        </span>
                                        <div class="product-image-container">
                                            <img src="~/assets/Image/Product/@bienThe.UrlAnh.FirstOrDefault()" alt="Headphones" width="100%" height="100%">
                                        </div>

                                        <h6 class="product-name text-center">@hangHoa.TenHangHoa @bienThe.MauSac (@bienThe.DungLuong) </h6>
                                        <p class="product-description  text-center">@hangHoa.MoTa</p>
                                        @{
                                            double rating = hangHoa.DanhGiaTrungBinh ?? 0;
                                            int fullStars = (int)Math.Floor(rating);
                                            bool hasHalfStar = rating - fullStars >= 0.5;
                                            int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                                        }

                                        <div class="star-rating text-center">
                                            @for (int i = 0; i < fullStars; i++)
                                            {
                                                <i class="bi bi-star-fill "></i>
                                            }

                                            @if (hasHalfStar)
                                            {
                                                <i class="bi bi-star-half "></i>
                                            }

                                            @for (int i = 0; i < emptyStars; i++)
                                            {
                                                <i class="bi bi-star "></i>
                                            }

                                        </div>

                                        <div class="price-container">

                                            <div class="d-flex">
                                                <span class="current-price">@bienThe.GiaKhuyenMai.ToString("N0") đ</span>
                                                <span class="original-price text-muted text-decoration-line-through ms-2">
                                                    @bienThe.GiaBan.ToString("N0") đ
                                                </span>
                                            </div>

                                        </div>


                                        <div class="free-shipping text-center">FREE SHIPPING</div>
                                        <div class="d-flex justify-content-between">
                                            <div class="stock-status">
                                                @if (bienThe.SoLuongTonKho > 0)
                                                {
                                                    <i class="bi bi-check-circle-fill in-stock-icon"></i>
                                                    <span>In stock</span>

                                                }
                                                else
                                                {
                                                    <i class="bi bi-x-circle-fill out-of-stock-icon text-danger"></i>
                                                    <span>&nbsp;Out stock</span>
                                                }
                                            </div>
                                            <a href="#" class="text-decoration-none text-dark hover-shake add-to-favorite" data-mahanghoa="@hangHoa.MaHangHoa">
                                                @if (ViewBag.DanhSachYeuThich.Contains(hangHoa.MaHangHoa))
                                                {
                                                    <i class="fas fa-heart heart-icon glowing-heart" data-filled="true"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-heart heart-icon" data-filled="false"></i>
                                                }
                                                <span>Yêu thích</span>
                                            </a>
                                        </div>

                                    </div>
                                </div>
                            }

                        }

                    </div>
                    <div class="text-center mt-4">
                        <button id="loadMoreBtn" class="btn btn-outline-primary">
                            Xem thêm @Model.BienTheHangHoas.Count() - 8 sản phẩm còn lại
                        </button>
                    </div>


                    <div id="load-more-spinner" class="text-center my-3" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>



<!-- Product Reviews -->
<script>
    const userid = "@Session["UserId"]";
    const hoten = "@Session["UserName"]";
</script>

<!-- Product Reviews -->
<div class="container py-4 rounded-3 bg-white p-4 mb-2">
    <h2 class="h3 mb-4 fw-bold">Hỏi và đáp</h2>

    <!-- Leave Comment -->
    <div class="mb-5">
        <div class="row g-3 align-items-start">
            <!-- Cột textarea -->
            <div class="col-12 col-md-11">
                <textarea id="question" class="form-control" rows="4"
                          placeholder="Swoo sẽ trả lời trong 1 giờ (sau 22h, phản hồi vào sáng hôm sau). Một số thông tin có thể thay đổi, Quý khách hãy đặt câu hỏi để được cập nhật mới nhất."></textarea>
            </div>

            <!-- Cột nút gửi -->
            <div class="col-12 col-md-1 text-md-end">
                <button class="btn btn-success w-100 w-md-auto" onclick="sendQuestion()">
                    <i class="fas fa-paper-plane me-1"></i> Gửi
                </button>
            </div>
        </div>
    </div>

    <!-- Câu hỏi & trả lời sẽ hiển thị ở đây -->
    <div id="qaContainer"></div>
</div>



<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-database-compat.js"></script>

<script>
    const firebaseConfig = {
        apiKey: "AIzaSyDOmM_iFG3hOUoZ7D053NpXzJc7bYQ9Jho",
        authDomain: "swootechsmart.firebaseapp.com",
        databaseURL: "https://swootechsmart-default-rtdb.asia-southeast1.firebasedatabase.app",
        projectId: "swootechsmart",
        storageBucket: "swootechsmart.appspot.com",
        messagingSenderId: "243392421629",
        appId: "1:243392421629:web:1238116e5f3ecf87e22894"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();

    const replyListeners = {};

    window.addEventListener('DOMContentLoaded', loadAllQuestionsRealtime);

    function loadAllQuestionsRealtime() {
        const container = document.getElementById("qaContainer");
        container.innerHTML = '';

        db.ref('qa').orderByChild('timestamp').on('child_added', snapshot => {
            const data = snapshot.val();
            if (!document.getElementById(`qa-${data.timestamp}`)) {
                renderQA(data);
            }
        });

        db.ref('qa').on('child_removed', snapshot => {
            const data = snapshot.val();
            const element = document.getElementById(`qa-${data.timestamp}`);
            if (element) element.remove();
        });

        db.ref('qa').on('child_changed', snapshot => {
            const data = snapshot.val();
            const existing = document.getElementById(`qa-${data.timestamp}`);
            if (existing) existing.remove();
            renderQA(data);
        });
    }

    function renderQA(data) {
        const container = document.getElementById("qaContainer");

        const html = `
       <div class="bg-white rounded shadow p-4 mb-4">
          <!-- User Info + Timestamp -->
          <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-3">
              <img src="https://png.pngtree.com/png-vector/20191027/ourmid/pngtree-user-icon-isolated-on-abstract-background-png-image_1875037.jpg"
                   alt="User" class="rounded-circle" width="50" height="50">
              <div>
                <div class="fw-semibold">${data.askedBy}
                   <span class="badge bg-success">Member</span>
             </div>
              </div>
            </div>
            <div class="text-muted small">
              ${isNaN(new Date(Number(data.timestamp)).getTime()) ? "Không xác định" : new Date(Number(data.timestamp)).toLocaleDateString()}
            </div>
          </div>

          <!-- Question -->
          <p class="text-muted fs-5 mb-3">${data.question}</p>

          <!-- Replies will be inserted here -->
          <div id="replies-${data.timestamp}" class="mt-3 ps-4 border-start"></div>

          <!-- Reply Input -->
          <div class="d-flex align-items-center gap-2 mt-3 ps-4">
            <input type="text" class="form-control" placeholder="Phản hồi..." id="replyInput-${data.timestamp}">
            <button class="btn btn-success d-flex align-items-center" onclick="sendReply('${data.timestamp}')">
              <i class="fas fa-paper-plane me-1"></i> Gửi
            </button>
          </div>
        </div>
        `;

        container.innerHTML = html + container.innerHTML;

        listenToReplies(data.timestamp);
    }

    function listenToReplies(questionId) {
        const repliesRef = db.ref(`qa/${questionId}/replies`);
        const repliesContainer = document.getElementById(`replies-${questionId}`);

        if (repliesContainer) {
            repliesContainer.innerHTML = '';
        }

        if (replyListeners[questionId]) {
            repliesRef.off('child_added', replyListeners[questionId]);
        }

        const callback = snapshot => {
            const reply = snapshot.val();
            let html = '';

            if (reply.repliedBy === 'admin') {
                // ✅ Giao diện admin
                html = `
            <div class="ms-5 mt-3 bg-white p-3 rounded-4 border shadow-sm">
                <div class="d-flex justify-content-between mb-2">
                    <div class="d-flex gap-2 align-items-center">
                        <img src="https://cdn-icons-png.flaticon.com/512/1946/1946429.png" alt="Admin" class="rounded-circle" width="40" height="40">
                        <div class="fw-medium text-danger">Quản trị viên</div>
                        <div class="px-2 py-1 bg-danger text-white rounded-3 fs-7 fw-bold">QTV</div>
                    </div>
                    <div class="small text-muted">${reply.timestamp ? new Date(reply.timestamp).toLocaleDateString() : ''}</div>
                </div>
                <p class="mb-0 text-muted">${reply.message}</p>
            </div>`;
            } else {
                // ✅ Giao diện user thường
                html = `
            <div class="ms-5 mt-2 p-2 bg-white border-start border-3 border-secondary rounded-2">
                <div class="d-flex justify-content-between mb-2">
                    <div class="d-flex gap-2 align-items-center">
                        <img src="https://png.pngtree.com/png-vector/20191027/ourmid/pngtree-user-icon-isolated-on-abstract-background-png-image_1875037.jpg" alt="Admin" class="rounded-circle" width="50" height="50">
                        <div class="fw-medium ">${reply.repliedBy}</div>
                        <div class="px-2 py-1 bg-success text-white rounded-3 fs-7 fw-bold">Member</div>
                    </div>
                    <div class="small text-muted">${reply.timestamp ? new Date(reply.timestamp).toLocaleDateString() : ''}</div>
                </div>
                <p class="mb-0 text-muted">${reply.message}</p>
            </div>`;
            }

            repliesContainer.insertAdjacentHTML('beforeend', html);
            repliesContainer.scrollTop = repliesContainer.scrollHeight; // Auto scroll xuống cuối
        };

        replyListeners[questionId] = callback;
        repliesRef.on('child_added', callback);
    }


    function sendQuestion() {
        const questionInput = document.getElementById('question');
        const question = questionInput.value.trim();
        const sessionId = Date.now().toString();

        if (!question) return Swal.fire("Lỗi", "Vui lòng nhập câu hỏi.", "warning");

        if (!userid) {
            return Swal.fire({
                title: 'Bạn cần đăng nhập',
                text: 'Vui lòng đăng nhập để gửi câu hỏi.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Đăng nhập',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/InnerPage/Login'; // 👉 Thay đường dẫn đăng nhập nếu cần
                }
            });
        }

        const questionData = {
            question: question,
            askedBy: hoten,
            timestamp: sessionId,
            answer: "",
            answeredBy: ""
        };

        db.ref('qa/' + sessionId).set(questionData);
        questionInput.value = "";
    }
    function sendReply(timestamp) {
        const input = document.getElementById(`replyInput-${timestamp}`);
        const message = input.value.trim();
        if (!message) return;

        if (!userid) {
            return Swal.fire({
                title: 'Bạn cần đăng nhập',
                text: 'Vui lòng đăng nhập để phản hồi.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Đăng nhập',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/InnerPage/Login'; // 👉 Đường dẫn đến trang đăng nhập
                }
            });
        }

        const replyId = Date.now().toString();

        let repliedBy = "Người dùng";
        if (typeof userid !== 'undefined' && hoten) {
            if (hoten.toLowerCase() === 'admin') {
                repliedBy = "Quản trị viên";
            } else {
                repliedBy = hoten;
            }
        }

        db.ref(`qa/${timestamp}/replies/${replyId}`).set({
            message: message,
            repliedBy: repliedBy,
            userId: typeof userId !== 'undefined' ? userId : null,
            timestamp: Date.now()
        });

        input.value = "";
    }

</script>

@Html.Action("RecentlyViewedPartial", "Product")

<style>
    .pagination .page-link {
        color: #1ABA1A;
        border: 1px solid #1ABA1A;
    }

        .pagination .page-link:hover {
            background-color: #1ABA1A;
            color: #fff;
        }

    .pagination .page-item.active .page-link {
        background-color: #1ABA1A;
        border-color: #1ABA1A;
        color: #fff;
    }

    .pagination .page-item.disabled .page-link {
        color: #ccc;
        border-color: #ddd;
    }
</style>
<script>
    function toggleBrandFilter() {
        const content = document.getElementById('brand-content');
        const icon = document.getElementById('brand-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }

    function togglePriceFilter() {
        const content = document.getElementById('price-content');
        const icon = document.getElementById('price-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }
    function toggleRatingFilter() {
        const content = document.getElementById('rating-content');
        const icon = document.getElementById('rating-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }

    function toggleMemoryFilter() {
        const content = document.getElementById('memory-content');
        const icon = document.getElementById('memory-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }
    function toggleRamFilter() {
        const content = document.getElementById('ram-content');
        const icon = document.getElementById('ram-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }
    function toggleMonitorFilter() {
        const content = document.getElementById('monitor-content');
        const icon = document.getElementById('monitor-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }
    function toggleBonhoFilter() {
        const content = document.getElementById('bonho-content');
        const icon = document.getElementById('bonho-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('fa-chevron-up');
        icon.classList.toggle('fa-chevron-down');
    }
</script>
<script>
    const rangeMin = document.getElementById("rangeMin");
    const rangeMax = document.getElementById("rangeMax");
    const fill = document.getElementById("sliderFill");
    const minInput = document.getElementById("priceMinInput");
    const maxInput = document.getElementById("priceMaxInput");

    function formatVND(value) {
        return Number(value).toLocaleString("vi-VN") + " ₫";
    }

    function unformatVND(value) {
        return parseInt(value.replace(/[^\d]/g, '')) || 0;
    }

    function updateSliderFromRange() {
        let minVal = parseInt(rangeMin.value);
        let maxVal = parseInt(rangeMax.value);

        if (minVal > maxVal - 1000) {
            minVal = maxVal - 1000;
            rangeMin.value = minVal;
        }

        if (maxVal < minVal + 1000) {
            maxVal = minVal + 1000;
            rangeMax.value = maxVal;
        }

        const rangeWidth = rangeMin.max - rangeMin.min;
        const leftPercent = ((minVal - rangeMin.min) / rangeWidth) * 100;
        const rightPercent = ((maxVal - rangeMin.min) / rangeWidth) * 100;

        fill.style.left = leftPercent + "%";
        fill.style.width = (rightPercent - leftPercent) + "%";

        minInput.value = formatVND(minVal);
        maxInput.value = formatVND(maxVal);

    }

    function updateRangeFromInput() {
        let minVal = unformatVND(minInput.value);
        let maxVal = unformatVND(maxInput.value);

        if (minVal > maxVal - 1000) {
            minVal = maxVal - 1000;
        }

        if (maxVal < minVal + 1000) {
            maxVal = minVal + 1000;
        }

        minVal = Math.max(0, Math.min(minVal, 10000000));
        maxVal = Math.max(0, Math.min(maxVal, 10000000));

        rangeMin.value = minVal;
        rangeMax.value = maxVal;

        minInput.value = formatVND(minVal);
        maxInput.value = formatVND(maxVal);

        updateSliderFromRange();
    }

    // Events
    rangeMin.addEventListener("input", updateSliderFromRange);
    rangeMax.addEventListener("input", updateSliderFromRange);
    minInput.addEventListener("input", () => {
        setTimeout(updateRangeFromInput, 300);
    });
    maxInput.addEventListener("input", () => {
        setTimeout(updateRangeFromInput, 300);
    });

    // Gọi khi load lần đầu
    updateSliderFromRange();
</script>

<script>
    const swiper = new Swiper(".product-swiper", {
        loop: true,
        pagination: {
            el: ".swiper-pagination",
            clickable: true,
        },
        navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        },
        autoplay: {
            delay: 4000,
            disableOnInteraction: false,
        },
        grabCursor: true,
    });
</script>
<script>
    // add ds yêu thích
    $(document).ready(function () {
        $('.add-to-favorite').on('click', function (e) {
            e.preventDefault();
            const $icon = $(this).find('.heart-icon');
            const maHangHoa = $(this).data('mahanghoa');

            $.ajax({
                url: '/Product/AddWishList',
                type: 'POST',
                data: { maHangHoa: maHangHoa },
                success: function (res) {
                    if (res.success) {
                        if (res.removed) {
                            $icon.removeClass('fas fa-heart glowing-heart').addClass('far fa-heart').attr('data-filled', 'false');
                        } else {
                            $icon.removeClass('far fa-heart').addClass('fas fa-heart glowing-heart').attr('data-filled', 'true');
                        }

                        Swal.fire({
                            icon: 'success',
                            title: 'Thông báo',
                            text: res.message,
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'info',
                            title: 'Thông báo',
                            text: res.message
                        });
                    }
                }
            });
        });
    });
</script>

<script>
    const filterSelectors = [
        '.brand-checkbox',
        '.rating-checkbox',
        '.ram-checkbox',
        '.memory-checkbox',
        '.monitor-checkbox',
        '.bonho-checkbox'
    ];

    filterSelectors.forEach(selector => {
        document.querySelectorAll(selector).forEach(cb => {
            cb.addEventListener('change', filterProducts);
        });
    });

    function filterProducts() {
        const getSelectedValues = (selector) => {
            return Array.from(document.querySelectorAll(selector + ':checked')).map(cb => cb.value);
        };
        const selectedBoNho = getSelectedValues('.bonho-checkbox');
        const selectedBrands = getSelectedValues('.brand-checkbox');
        const selectedRatings = getSelectedValues('.rating-checkbox').map(Number);
        const selectedRAMs = getSelectedValues('.ram-checkbox');
        const selectedMemory = getSelectedValues('.memory-checkbox');
        const selectedMonitors = getSelectedValues('.monitor-checkbox');

        document.querySelectorAll('.product-item').forEach(product => {
            const brand = product.dataset.thuongHieu;
            const rating = parseInt(product.dataset.rating);
            const ram = product.dataset.ram;
            const memory = product.dataset.memory;
            const monitor = product.dataset.monitor;
            const bonho = product.dataset.bonho;

            const brandMatch = selectedBrands.length === 0 || selectedBrands.includes(brand);
            const ratingMatch = selectedRatings.length === 0 || selectedRatings.includes(rating);
            const ramMatch = selectedRAMs.length === 0 || selectedRAMs.includes(ram);
            const memoryMatch = selectedMemory.length === 0 || selectedMemory.includes(memory);
            const monitorMatch = selectedMonitors.length === 0 || selectedMonitors.includes(monitor);
            const bonhoMatch = selectedBoNho.length === 0 || selectedBoNho.includes(bonho);

            const show = brandMatch && ratingMatch && ramMatch && memoryMatch && monitorMatch && bonhoMatch;

            product.style.display = show ? 'block' : 'none';
        });
    }

    document.getElementById("resetFilters").addEventListener("click", function () {
        // Bỏ chọn tất cả các checkbox
        document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);

        // Hiển thị lại tất cả sản phẩm
        document.querySelectorAll('.product-item').forEach(product => {
            product.style.display = 'block';
        });
        document.getElementById("priceMinInput").value = "0";
        document.getElementById("priceMaxInput").value = "100000000";

    });

</script>
<script>
    document.getElementById("filterByPrice").addEventListener("click", function () {
        const min = parseInt(document.getElementById("priceMinInput").value) || 0;
        const max = parseInt(document.getElementById("priceMaxInput").value) || 100000000;

        document.querySelectorAll(".product-item").forEach(item => {
            const price = parseInt(item.getAttribute("data-price")) || 0;
            if (price >= min && price <= max) {
                item.style.display = "block";
            } else {
                item.style.display = "none";
            }
        });
    });
</script>
<script>
    document.querySelectorAll(".sort-btn").forEach(btn => {
        btn.addEventListener("click", function () {
            // Bỏ active các nút khác
            document.querySelectorAll(".sort-btn").forEach(b => b.classList.remove("active"));
            this.classList.add("active");

            const sortType = this.dataset.sort;
            const productList = document.querySelector(".product-list");
            const items = Array.from(productList.querySelectorAll(".product-item"));

            // Hàm parse số từ chuỗi có "đ" và dấu chấm
            const getPriceValue = el => {
                const priceText = el.dataset.price || "0";
                return parseInt(priceText.replace(/[^\d]/g, "")) || 0;
            };

            const getRatingValue = el => {
                return parseFloat(el.dataset.rating) || 0;
            };

            let sortedItems = [];

            switch (sortType) {
                case "highToLow":
                    sortedItems = items.sort((a, b) => getPriceValue(b) - getPriceValue(a));
                    break;
                case "lowToHigh":
                    sortedItems = items.sort((a, b) => getPriceValue(a) - getPriceValue(b));
                    break;
                case "hotDeals":
                    sortedItems = items.sort((a, b) => {
                        const discountA = getPriceValue(a) / parseInt(a.dataset.originalPrice.replace(/[^\d]/g, "")) || 1;
                        const discountB = getPriceValue(b) / parseInt(b.dataset.originalPrice.replace(/[^\d]/g, "")) || 1;
                        return discountA - discountB; // discount thấp hơn là giảm giá cao hơn
                    });
                    break;
                case "mostViewed":
                    sortedItems = items.sort((a, b) => getRatingValue(b) - getRatingValue(a));
                    break;
                default:
                    sortedItems = items;
            }

            // Xóa cũ và gắn lại theo thứ tự mới
            productList.innerHTML = "";
            sortedItems.forEach(item => productList.appendChild(item));
        });
    });
</script>
<script>
    const items = document.querySelectorAll('.product-item');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const spinner = document.getElementById('load-more-spinner');

    let visibleCount = 0;
    const initialShow = 8;
    const itemsPerClick = 4;

    function updateButtonText() {
        const remaining = items.length - visibleCount;
        loadMoreBtn.innerText = `Xem thêm ${remaining} sản phẩm còn lại`;
    }

    function showItems(count) {
        let shown = 0;
        for (let i = visibleCount; i < items.length && shown < count; i++) {
            items[i].classList.remove('d-none');
            shown++;
        }
        visibleCount += shown;

        if (visibleCount >= items.length) {
            loadMoreBtn.style.display = 'none';
        } else {
            updateButtonText();
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        showItems(initialShow);
        updateButtonText();
    });

    loadMoreBtn.addEventListener('click', function () {
        loadMoreBtn.style.display = 'none';
        spinner.style.display = 'block';

        setTimeout(function () {
            showItems(itemsPerClick);
            spinner.style.display = 'none';
            if (visibleCount < items.length) {
                loadMoreBtn.style.display = 'inline-block';
            }
        }, 1000);
    });
</script>

<script>
    function toggleCategories() {
        const extras = document.querySelectorAll('[data-extra="true"]');
        const btn = document.getElementById("toggleButton");

        const isHidden = extras[0].classList.contains('d-none');
        extras.forEach(el => el.classList.toggle('d-none'));

        btn.textContent = isHidden ? 'Thu gọn' : 'Xem tất cả';
    }
</script>
